#!/usr/bin/env python3
"""
Automated GitHub Secrets Fetcher
This script fetches GitHub secrets and creates a .env file automatically.
"""

import subprocess
import os
import sys
from pathlib import Path

def run_gh_command(args):
    """Run a GitHub CLI command and return the output"""
    try:
        cmd = [r"C:\Program Files\GitHub CLI\gh.exe"] + args
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error running gh command: {e}")
        print(f"Stderr: {e.stderr}")
        return None

def get_secret_value(repo, secret_name):
    """Attempt to get a secret value (note: GitHub CLI doesn't expose secret values directly)"""
    # GitHub CLI doesn't allow reading secret values for security reasons
    # This is intentional - secrets should only be accessible in GitHub Actions
    return None

def create_env_from_secrets():
    """Create .env file with secret names from GitHub"""
    
    print("üîç Fetching GitHub secrets list...")
    
    # Get list of secrets
    secrets_output = run_gh_command(['secret', 'list', '--repo', 'Yoha02/agent4good'])
    
    if not secrets_output:
        print("‚ùå Failed to fetch secrets list")
        return False
    
    # Parse secret names from output
    secret_names = []
    for line in secrets_output.split('\n'):
        if line.strip() and not line.startswith('NAME'):
            parts = line.split()
            if parts:
                secret_names.append(parts[0])
    
    print(f"‚úÖ Found {len(secret_names)} secrets:")
    for name in secret_names:
        print(f"   - {name}")
    
    # Create .env file content
    env_content = [
        "# Auto-generated from GitHub Secrets",
        "# Generated by automated script",
        "",
        "# Flask Configuration", 
        "FLASK_ENV=development",
        "FLASK_DEBUG=true",
        ""
    ]
    
    # Map secrets to environment variables
    secret_mapping = {
        'SECRET_KEY': 'SECRET_KEY',
        'GOOGLE_CLOUD_PROJECT': 'GOOGLE_CLOUD_PROJECT', 
        'BIGQUERY_DATASET': 'BIGQUERY_DATASET',
        'BIGQUERY_TABLE_REPORTS': 'BIGQUERY_TABLE_REPORTS',
        'GOOGLE_API_KEY': 'GOOGLE_API_KEY',
        'GEMINI_API_KEY': 'GEMINI_API_KEY',
        'EPA_API_KEY': 'EPA_API_KEY',
        'AQS_API_KEY': 'AQS_API_KEY',
        'AQS_EMAIL': 'AQS_EMAIL',
        'PORT': 'PORT',
        'GCS_VIDEO_BUCKET': 'GCS_VIDEO_BUCKET',
        'TWITTER_API_KEY': 'TWITTER_API_KEY',
        'TWITTER_API_SECRET': 'TWITTER_API_SECRET',
        'TWITTER_ACCESS_TOKEN': 'TWITTER_ACCESS_TOKEN',
        'TWITTER_ACCESS_TOKEN_SECRET': 'TWITTER_ACCESS_TOKEN_SECRET',
        'TWITTER_BEARER_TOKEN': 'TWITTER_BEARER_TOKEN',
        'TWITTER_USERNAME': 'TWITTER_USERNAME'
    }
    
    # Add available secrets
    for secret_name in secret_names:
        if secret_name in secret_mapping:
            env_name = secret_mapping[secret_name]
            env_content.append(f"{env_name}=<SECRET_VALUE_FROM_GITHUB>")
    
    # Write .env file
    env_file = Path('.env')
    with open(env_file, 'w') as f:
        f.write('\n'.join(env_content))
    
    print(f"\n‚úÖ Created {env_file.absolute()}")
    print(f"üìù The .env file has placeholder values.")
    print(f"üîê GitHub secrets cannot be read directly (security feature)")
    print(f"üí° You need to manually copy values from GitHub Settings")
    
    return True

def main():
    print("üöÄ Automated GitHub Secrets Fetcher")
    print("=" * 50)
    
    # Check if authenticated
    auth_output = run_gh_command(['auth', 'status'])
    if not auth_output or 'Logged in to github.com' not in auth_output:
        print("‚ùå Not authenticated with GitHub CLI")
        print("üí° Run: gh auth login")
        return False
    
    print("‚úÖ Authenticated with GitHub CLI")
    
    # Create .env file
    success = create_env_from_secrets()
    
    if success:
        print(f"\nüéâ Setup complete!")
        print(f"üìã Next steps:")
        print(f"   1. Go to: https://github.com/Yoha02/agent4good/settings/secrets/actions")
        print(f"   2. Copy each secret value manually")
        print(f"   3. Replace <SECRET_VALUE_FROM_GITHUB> in .env with actual values")
        print(f"   4. Restart Flask app: python app_local.py")

if __name__ == "__main__":
    main()