name: Code Quality

on:
  push:
    branches: [ main, combined-branch-s, Improving-UI-From-Main-S ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint bandit safety
    
    - name: Run flake8
      run: |
        echo "## Flake8 Results" >> $GITHUB_STEP_SUMMARY
        flake8 . --count --statistics --exclude=venv,.venv,env --format=default > flake8_results.txt || true
        cat flake8_results.txt >> $GITHUB_STEP_SUMMARY
    
    - name: Check code formatting with black
      run: |
        echo "## Black Formatting Check" >> $GITHUB_STEP_SUMMARY
        black --check . --exclude='/(\.venv|venv|env)/' >> $GITHUB_STEP_SUMMARY 2>&1 || echo "❌ Code needs formatting" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        echo "## Import Sorting Check" >> $GITHUB_STEP_SUMMARY
        isort . --check-only --skip venv --skip .venv --skip env >> $GITHUB_STEP_SUMMARY 2>&1 || echo "❌ Imports need sorting" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
    
    - name: Run pylint
      run: |
        echo "## Pylint Results" >> $GITHUB_STEP_SUMMARY
        pylint **/*.py --exit-zero --ignore=venv,.venv,env > pylint_results.txt || true
        tail -20 pylint_results.txt >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        echo "## Security Scan (Bandit)" >> $GITHUB_STEP_SUMMARY
        bandit -r . -x ./venv,./env,./.venv -f txt > bandit_results.txt || true
        cat bandit_results.txt >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        echo "## Dependency Security Check" >> $GITHUB_STEP_SUMMARY
        safety check --json > safety_results.json || true
        python -c "import json; data=json.load(open('safety_results.json')); print(f'Found {len(data)} vulnerabilities' if isinstance(data, list) else 'No vulnerabilities found')" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
