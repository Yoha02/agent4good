name: CI/CD - Build, Test & Deploy

on:
  push:
    branches: [ main, combined-branch-s, Improving-UI-From-Main-S ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # GitHub Secrets are automatically available as environment variables
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  FLASK_ENV: production
  
  # Google Cloud Configuration
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  BIGQUERY_DATASET: ${{ secrets.BIGQUERY_DATASET }}
  BIGQUERY_TABLE_REPORTS: ${{ secrets.BIGQUERY_TABLE_REPORTS }}
  
  # Google API Keys
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  
  # EPA API Configuration
  EPA_API_KEY: ${{ secrets.EPA_API_KEY }}
  AQS_API_KEY: ${{ secrets.AQS_API_KEY }}
  AQS_EMAIL: ${{ secrets.AQS_EMAIL }}
  
  # Video & Social Media
  GCS_VIDEO_BUCKET: ${{ secrets.GCS_VIDEO_BUCKET }}
  TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
  TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
  TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
  TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
  TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
  TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
  
  # Port Configuration
  PORT: 8080

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,.venv,env
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,.venv,env
      continue-on-error: true
    
    - name: Check code formatting with black
      run: |
        black --check . --exclude='/(\.venv|venv|env)/' || true
      continue-on-error: true
    
    - name: Run tests
      run: |
        # Run tests if they exist
        if [ -d "tests" ]; then
          pytest tests/ -v || echo "No tests found or tests failed"
        else
          echo "No tests directory found - skipping tests"
        fi
      continue-on-error: true
    
    - name: Verify environment configuration
      run: |
        echo "✅ All secrets are configured:"
        echo "- GOOGLE_API_KEY: ${GOOGLE_API_KEY:0:10}..."
        echo "- GEMINI_API_KEY: ${GEMINI_API_KEY:0:10}..."
        echo "- EPA_API_KEY: ${EPA_API_KEY:0:10}..."
        echo "- Project: $GOOGLE_CLOUD_PROJECT"
  
  # Job 2: Build & Deploy to Cloud Run
  deploy:
    name: Build & Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/combined-branch-s' || github.ref == 'refs/heads/Improving-UI-From-Main-S')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Google Cloud credentials
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    
    - name: Configure Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker
    
    - name: Build Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/agent4good:${{ github.sha }} \
          -t gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/agent4good:latest .
    
    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/agent4good:${{ github.sha }}
        docker push gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/agent4good:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy agent4good \
          --image gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/agent4good:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --max-instances 10 \
          --set-env-vars "SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars "BIGQUERY_DATASET=${{ secrets.BIGQUERY_DATASET }}" \
          --set-env-vars "BIGQUERY_TABLE_REPORTS=${{ secrets.BIGQUERY_TABLE_REPORTS }}" \
          --set-env-vars "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" \
          --set-env-vars "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --set-env-vars "EPA_API_KEY=${{ secrets.EPA_API_KEY }}" \
          --set-env-vars "AQS_API_KEY=${{ secrets.AQS_API_KEY }}" \
          --set-env-vars "AQS_EMAIL=${{ secrets.AQS_EMAIL }}" \
          --set-env-vars "GCS_VIDEO_BUCKET=${{ secrets.GCS_VIDEO_BUCKET }}" \
          --set-env-vars "TWITTER_API_KEY=${{ secrets.TWITTER_API_KEY }}" \
          --set-env-vars "TWITTER_API_SECRET=${{ secrets.TWITTER_API_SECRET }}" \
          --set-env-vars "TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN }}" \
          --set-env-vars "TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}" \
          --set-env-vars "TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN }}" \
          --set-env-vars "TWITTER_USERNAME=${{ secrets.TWITTER_USERNAME }}" \
          --set-env-vars "PORT=8080" \
          --set-env-vars "FLASK_ENV=production"
    
    - name: Get Cloud Run URL
      id: get-url
      run: |
        URL=$(gcloud run services describe agent4good --region us-central1 --format='value(status.url)')
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "🚀 Deployed to: $URL"
    
    - name: Test deployment
      run: |
        URL="${{ steps.get-url.outputs.url }}"
        echo "Testing deployment at $URL"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL/health || echo "000")
        if [ "$HTTP_STATUS" == "200" ]; then
          echo "✅ Deployment successful! Health check passed."
        else
          echo "⚠️ Health check returned status: $HTTP_STATUS"
        fi
    
    - name: Create deployment summary
      run: |
        echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.get-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/agent4good:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔑 Environment Variables Set" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All GitHub Secrets configured" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Google Cloud Project: ${{ secrets.GOOGLE_CLOUD_PROJECT }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API Keys configured (GOOGLE, GEMINI, EPA)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Twitter integration enabled" >> $GITHUB_STEP_SUMMARY
